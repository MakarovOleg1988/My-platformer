//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/New Input System/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MyPlatformer
{
    public partial class @NewControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NewControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""ActionMaps"",
            ""id"": ""1df591e5-f7d1-4443-9372-634ccf0e4116"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""29c20ead-48ba-4374-8352-c60fef95cf3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""909c0ce6-410f-4ad1-aa27-adc0c6e0509b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ac4bc2b7-1fa3-4c2c-a81b-c098c2e52bec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8b0cdbaa-10ee-4762-a020-6371a57c3d6a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""48e49db7-0bdd-4afe-b05a-8597a5e42c41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9ea713c-262e-4848-a8c8-b428d6ca4632"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ActionMaps
            m_ActionMaps = asset.FindActionMap("ActionMaps", throwIfNotFound: true);
            m_ActionMaps_Movement = m_ActionMaps.FindAction("Movement", throwIfNotFound: true);
            m_ActionMaps_Jump = m_ActionMaps.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ActionMaps
        private readonly InputActionMap m_ActionMaps;
        private IActionMapsActions m_ActionMapsActionsCallbackInterface;
        private readonly InputAction m_ActionMaps_Movement;
        private readonly InputAction m_ActionMaps_Jump;
        public struct ActionMapsActions
        {
            private @NewControls m_Wrapper;
            public ActionMapsActions(@NewControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_ActionMaps_Movement;
            public InputAction @Jump => m_Wrapper.m_ActionMaps_Jump;
            public InputActionMap Get() { return m_Wrapper.m_ActionMaps; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ActionMapsActions set) { return set.Get(); }
            public void SetCallbacks(IActionMapsActions instance)
            {
                if (m_Wrapper.m_ActionMapsActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnMovement;
                    @Jump.started -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_ActionMapsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public ActionMapsActions @ActionMaps => new ActionMapsActions(this);
        public interface IActionMapsActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
